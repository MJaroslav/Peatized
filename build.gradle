buildscript {
    repositories {
        jcenter()
        maven { url = "https://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
    }
}

repositories {
    maven {
        name "HWYLA"
        url "http://tehnut.info/maven"
    }
    maven {
        name "CB Repo"
        url "http://chickenbones.net/maven/"
    }
    maven {
        name = "JEI"
        url = "https://modmaven.k-4u.nl"
    }
}

apply plugin: "net.minecraftforge.gradle.forge"

ext.config = parseConfig(file("build.properties"))
ext.mod = parseConfig(file("mod.properties"))

version = "${config.mc_version}-${mod.version}-${mod.type}"
group = mod.group
archivesBaseName = mod.name

minecraft {
    version = "${config.mc_version}-${config.forge_version}"
    runDir = "${config.run_dir}"
    mappings = "${config.mappings}"
    replace "@VERSION@", version
    replaceIn "ModInfo.java"
    makeObfSourceJar = false
}

dependencies {
    deobfCompile "mcp.mobius.waila:Hwyla:1.8.26-B41_1.12.2"
    deobfProvided "mezz.jei:jei_1.12.2:4.9.2.196:api"
    runtime "mezz.jei:jei_1.12.2:4.9.2.196"
}

compileJava.options.encoding = "UTF-8"

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"
        expand "version":project.version, "mcversion":project.minecraft.version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

task deobfJar(type: Jar) {
    from(sourceSets.main.output)
    classifier = "deobf"
}

task srcJar(type: Jar) {
    from(sourceSets.main.java)
    classifier = "sources"
}

task apiJar(type: Jar) {
    from(sourceSets.main.allJava)
    from(sourceSets.main.output)
    include "mjaroslav/mcmods/peatized/api/**"
    classifier = "api"
}

artifacts {
    archives srcJar, deobfJar, apiJar
}

static def parseConfig(File config) {
    if(config.exists()){
        config.withReader {
            def prop = new Properties()
            prop.load(it)
            return (new ConfigSlurper().parse(prop))
        }
    } else {
        return null
    }
}
